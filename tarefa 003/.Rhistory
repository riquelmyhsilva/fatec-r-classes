cat("Média:", media_tabela1, "\n")
cat("Moda:", moda_tabela1, "\n")
cat("Mediana:", mediana_tabela1, "\n\n")
cat("Resultados Tabela 2:\n")
cat("Média:", media_tabela2, "\n")
cat("Moda:", moda_tabela2, "\n")
cat("Mediana:", mediana_tabela2, "\n\n")
cat("Resultados Tabela 3:\n")
cat("Média:", media_tabela3, "\n")
cat("Moda:", moda_tabela3, "\n")
cat("Mediana:", mediana_tabela3, "\n")
# Riquelmy Henrique Silva
# Disciplina: Projeto Integrador II
# Aula 03
# Conteúdo: Dataframes
# --------------------------------------------------------------
# Inserindo tabelas como data.frame
# tabela 1
table_1 <- data.frame(
xi = c(2, 3, 4, 5),
fi = c(2, 3, 6, 1)
)
print(table_1)
# tabela 2
table_2 <- data.frame(
xi = c(1, 3, 5, 7),
fi = c(6, 3, 8, 1)
)
# tabela 3
table_3 <- data.frame(
xi = c(2, 4, 6, 8),
fi = c(4, 5, 5, 3)
)
# Criando funções
# Função de média
calc_avarage <- function(table) {
sum_prod <- sum(table$xi * table$fi)
sum_freq <- sum(table$fi)
avarage <- sum_prod / sum_freq
return(avarage)
}
# Função de moda
calc_mode <- function(table) {
mode <- table$xi[which.max(table$fi)]
return(mode)
}
value <- rep(table_1$xi, table$fi)
# Ariel Ladislau Reises
# Aula 003 - Quadro 16
# Inserindo as tabelas como data.frame
# Tabela 1
tabela1 <- data.frame(
Xi = c(2, 3, 4, 5),
fi = c(2, 3, 6, 1)
)
# Tabela 2
tabela2 <- data.frame(
Xi = c(1, 3, 5, 7),
fi = c(6, 3, 8, 1)
)
# Tabela 3
tabela3 <- data.frame(
Xi = c(2, 4, 6, 8),
fi = c(4, 5, 5, 3)
)
# Criando as funções
# Função pra calcular a média
calcular_media <- function(tabela) {
soma_produtos <- sum(tabela$Xi * tabela$fi)
soma_frequencias <- sum(tabela$fi)
media <- soma_produtos / soma_frequencias
return(media)
}
# Função pra calcular a moda
calcular_moda <- function(tabela) {
moda <- tabela$Xi[which.max(tabela$fi)]
return(moda)
}
# Função pra calcular a mediana
calcular_mediana <- function(tabela) {
valores_expandidos <- rep(tabela$Xi, tabela$fi)
valores_ordenados <- sort(valores_expandidos)
n <- length(valores_ordenados)
if (n %% 2 == 0) {
mediana <- (valores_ordenados[n/2] + valores_ordenados[n/2 + 1]) / 2
} else {
mediana <- valores_ordenados[(n + 1) / 2]
}
return(mediana)
}
# Fazendo os calculos
# Calculando a Tabela 1
media_tabela1 <- calcular_media(tabela1)
moda_tabela1 <- calcular_moda(tabela1)
mediana_tabela1 <- calcular_mediana(tabela1)
# Calculando a Tabela 2
media_tabela2 <- calcular_media(tabela2)
moda_tabela2 <- calcular_moda(tabela2)
mediana_tabela2 <- calcular_mediana(tabela2)
# Calculando a Tabela 3
media_tabela3 <- calcular_media(tabela3)
moda_tabela3 <- calcular_moda(tabela3)
mediana_tabela3 <- calcular_mediana(tabela3)
# Mostrando os resultados
cat("Resultados Tabela 1:\n")
cat("Média:", media_tabela1, "\n")
cat("Moda:", moda_tabela1, "\n")
cat("Mediana:", mediana_tabela1, "\n\n")
cat("Resultados Tabela 2:\n")
cat("Média:", media_tabela2, "\n")
cat("Moda:", moda_tabela2, "\n")
cat("Mediana:", mediana_tabela2, "\n\n")
cat("Resultados Tabela 3:\n")
cat("Média:", media_tabela3, "\n")
cat("Moda:", moda_tabela3, "\n")
cat("Mediana:", mediana_tabela3, "\n")
# Riquelmy Henrique Silva
# Disciplina: Projeto Integrador II
# Aula 03
# Conteúdo: Dataframes
# --------------------------------------------------------------
# Inserindo tabelas como data.frame
# tabela 1
table_1 <- data.frame(
xi = c(2, 3, 4, 5),
fi = c(2, 3, 6, 1)
)
print(table_1)
# tabela 2
table_2 <- data.frame(
xi = c(1, 3, 5, 7),
fi = c(6, 3, 8, 1)
)
# tabela 3
table_3 <- data.frame(
xi = c(2, 4, 6, 8),
fi = c(4, 5, 5, 3)
)
# Criando funções
# Função de média
calc_avarage <- function(table) {
sum_prod <- sum(table$xi * table$fi)
sum_freq <- sum(table$fi)
avarage <- sum_prod / sum_freq
return(avarage)
}
# Função de moda
calc_mode <- function(table) {
mode <- table$xi[which.max(table$fi)]
return(mode)
}
# Função de mediana
calc_median <- function(table) {
expand_values <- rep(table$xi, table$fi)
sort_values <- sort(expand_values)
n <- length(sort_values)
if (n %% 2 != 0){
median <- (sort_values[(n + 1)/2])
} else {
median <- (sort_values[n/2] + sort_values[n/2 + 1]) / 2
}
return(median)
}
# Variaveis para armazenar os resultados
avarage_table_1 <- calc_avarage(table_1)
mode_table_1 <- calc_mode(table_1)
median_table_1 <- calc_median(table_1)
# Apresentando os resultados
paste("Média da tabela 1: ", avarage_table_1)
paste("Mediana da tabela 1: ", median_table_1)
paste("Moda da tabela 1: ", mode_table_1)
# Ariel Ladislau Reises
# Aula 003 - Quadro 16
# Inserindo as tabelas como data.frame
# Tabela 1
tabela1 <- data.frame(
Xi = c(2, 3, 4, 5),
fi = c(2, 3, 6, 1)
)
# Tabela 2
tabela2 <- data.frame(
Xi = c(1, 3, 5, 7),
fi = c(6, 3, 8, 1)
)
# Tabela 3
tabela3 <- data.frame(
Xi = c(2, 4, 6, 8),
fi = c(4, 5, 5, 3)
)
# Criando as funções
# Função pra calcular a média
calcular_media <- function(tabela) {
soma_produtos <- sum(tabela$Xi * tabela$fi)
soma_frequencias <- sum(tabela$fi)
media <- soma_produtos / soma_frequencias
return(media)
}
# Função pra calcular a moda
calcular_moda <- function(tabela) {
moda <- tabela$Xi[which.max(tabela$fi)]
return(moda)
}
# Função pra calcular a mediana
calcular_mediana <- function(tabela) {
valores_expandidos <- rep(tabela$Xi, tabela$fi)
valores_ordenados <- sort(valores_expandidos)
n <- length(valores_ordenados)
if (n %% 2 == 0) {
mediana <- (valores_ordenados[n/2] + valores_ordenados[n/2 + 1]) / 2
} else {
mediana <- valores_ordenados[(n + 1) / 2]
}
return(mediana)
}
# Fazendo os calculos
# Calculando a Tabela 1
media_tabela1 <- calcular_media(tabela1)
moda_tabela1 <- calcular_moda(tabela1)
mediana_tabela1 <- calcular_mediana(tabela1)
# Calculando a Tabela 2
media_tabela2 <- calcular_media(tabela2)
moda_tabela2 <- calcular_moda(tabela2)
mediana_tabela2 <- calcular_mediana(tabela2)
# Calculando a Tabela 3
media_tabela3 <- calcular_media(tabela3)
moda_tabela3 <- calcular_moda(tabela3)
mediana_tabela3 <- calcular_mediana(tabela3)
# Mostrando os resultados
cat("Resultados Tabela 1:\n")
cat("Média:", media_tabela1, "\n")
cat("Moda:", moda_tabela1, "\n")
cat("Mediana:", mediana_tabela1, "\n\n")
cat("Resultados Tabela 2:\n")
cat("Média:", media_tabela2, "\n")
cat("Moda:", moda_tabela2, "\n")
cat("Mediana:", mediana_tabela2, "\n\n")
cat("Resultados Tabela 3:\n")
cat("Média:", media_tabela3, "\n")
cat("Moda:", moda_tabela3, "\n")
cat("Mediana:", mediana_tabela3, "\n")
# Riquelmy Henrique Silva
# Disciplina: Projeto Integrador II
# Aula 03
# Conteúdo: Dataframes
# --------------------------------------------------------------
# Inserindo tabelas como data.frame
# tabela 1
table_1 <- data.frame(
xi = c(2, 3, 4, 5),
fi = c(2, 3, 6, 1)
)
print(table_1)
# tabela 2
table_2 <- data.frame(
xi = c(1, 3, 5, 7),
fi = c(6, 3, 8, 1)
)
# tabela 3
table_3 <- data.frame(
xi = c(2, 4, 6, 8),
fi = c(4, 5, 5, 3)
)
# Criando funções
# Função de média
calc_avarage <- function(table) {
sum_prod <- sum(table$xi * table$fi)
sum_freq <- sum(table$fi)
avarage <- sum_prod / sum_freq
return(avarage)
}
# Função de moda
calc_mode <- function(table) {
mode <- table$xi[which.max(table$fi)]
return(mode)
}
# Função de mediana
calc_median <- function(table) {
expand_values <- rep(table$xi, table$fi)
sort_values <- sort(expand_values)
n <- length(sort_values)
if (n %% 2 != 0){
median <- (sort_values[(n + 1)/2])
} else {
median <- (sort_values[n/2] + sort_values[n/2 + 1]) / 2
}
return(median)
}
# Variaveis para armazenar os resultados
avarage_table_1 <- calc_avarage(table_1)
mode_table_1 <- calc_mode(table_1)
median_table_1 <- calc_median(table_1)
# Apresentando os resultados
paste("Média da tabela 1: ", avarage_table_1)
paste("Mediana da tabela 1: ", median_table_1)
paste("Moda da tabela 1: ", mode_table_1)
# Riquelmy Henrique Silva
# Disciplina: Projeto Integrador II
# Aula 03
# Conteúdo: Dataframes
# --------------------------------------------------------------
# Inserindo tabelas como data.frame
# tabela 1
table_1 <- data.frame(
xi = c(2, 3, 4, 5),
fi = c(2, 3, 6, 1)
)
print(table_1)
# tabela 2
table_2 <- data.frame(
xi = c(1, 3, 5, 7),
fi = c(6, 3, 8, 1)
)
# tabela 3
table_3 <- data.frame(
xi = c(2, 4, 6, 8),
fi = c(4, 5, 5, 3)
)
# Criando funções
# Função de média
calc_avarage <- function(table) {
sum_prod <- sum(table$xi * table$fi)
sum_freq <- sum(table$fi)
avarage <- sum_prod / sum_freq
return(avarage)
}
# Função de moda
calc_mode <- function(table) {
mode <- table$xi[which.max(table$fi)]
return(mode)
}
# Função de mediana
calc_median <- function(table) {
expand_values <- rep(table$xi, table$fi)
sort_values <- sort(expand_values)
n <- length(sort_values)
if (n %% 2 != 0){
median <- (sort_values[(n + 1)/2])
} else {
median <- (sort_values[n/2] + sort_values[n/2 + 1]) / 2
}
return(median)
}
# Variaveis para armazenar os resultados
avarage_table_1 <- calc_avarage(table_1)
mode_table_1 <- calc_mode(table_1)
median_table_1 <- calc_median(table_1)
avarage_table_2 <- calc_avarage(table_2)
mode_table_2 <- calc_mode(table_2)
median_table_2 <- calc_median(table_2)
avarage_table_3 <- calc_avarage(table_3)
mode_table_3 <- calc_mode(table_3)
median_table_3 <- calc_median(table_3)
# Apresentando os resultados
paste("Média da tabela 1: ", avarage_table_1)
paste("Mediana da tabela 1: ", median_table_1)
paste("Moda da tabela 1: ", mode_table_1)
paste("Média da tabela 2: ", avarage_table_2)
paste("Mediana da tabela 2: ", median_table_2)
paste("Moda da tabela 2: ", mode_table_2)
paste("Média da tabela 3: ", avarage_table_3)
paste("Mediana da tabela 3: ", median_table_3)
paste("Moda da tabela 3: ", mode_table_3)
# Ariel Ladislau Reises
# Aula 003 - Quadro 16
# Inserindo as tabelas como data.frame
# Tabela 1
tabela1 <- data.frame(
Xi = c(2, 3, 4, 5),
fi = c(2, 3, 6, 1)
)
# Tabela 2
tabela2 <- data.frame(
Xi = c(1, 3, 5, 7),
fi = c(6, 3, 8, 1)
)
# Tabela 3
tabela3 <- data.frame(
Xi = c(2, 4, 6, 8),
fi = c(4, 5, 5, 3)
)
# Criando as funções
# Função pra calcular a média
calcular_media <- function(tabela) {
soma_produtos <- sum(tabela$Xi * tabela$fi)
soma_frequencias <- sum(tabela$fi)
media <- soma_produtos / soma_frequencias
return(media)
}
# Função pra calcular a moda
calcular_moda <- function(tabela) {
moda <- tabela$Xi[which.max(tabela$fi)]
return(moda)
}
# Função pra calcular a mediana
calcular_mediana <- function(tabela) {
valores_expandidos <- rep(tabela$Xi, tabela$fi)
valores_ordenados <- sort(valores_expandidos)
n <- length(valores_ordenados)
if (n %% 2 == 0) {
mediana <- (valores_ordenados[n/2] + valores_ordenados[n/2 + 1]) / 2
} else {
mediana <- valores_ordenados[(n + 1) / 2]
}
return(mediana)
}
# Fazendo os calculos
# Calculando a Tabela 1
media_tabela1 <- calcular_media(tabela1)
moda_tabela1 <- calcular_moda(tabela1)
mediana_tabela1 <- calcular_mediana(tabela1)
# Calculando a Tabela 2
media_tabela2 <- calcular_media(tabela2)
moda_tabela2 <- calcular_moda(tabela2)
mediana_tabela2 <- calcular_mediana(tabela2)
# Calculando a Tabela 3
media_tabela3 <- calcular_media(tabela3)
moda_tabela3 <- calcular_moda(tabela3)
mediana_tabela3 <- calcular_mediana(tabela3)
# Mostrando os resultados
cat("Resultados Tabela 1:\n")
cat("Média:", media_tabela1, "\n")
cat("Moda:", moda_tabela1, "\n")
cat("Mediana:", mediana_tabela1, "\n\n")
cat("Resultados Tabela 2:\n")
cat("Média:", media_tabela2, "\n")
cat("Moda:", moda_tabela2, "\n")
cat("Mediana:", mediana_tabela2, "\n\n")
cat("Resultados Tabela 3:\n")
cat("Média:", media_tabela3, "\n")
cat("Moda:", moda_tabela3, "\n")
cat("Mediana:", mediana_tabela3, "\n")
PATH <- "D:\docs\Fatec\3 Semestre\ProjetoInt\tarefa 003"
# Limpar
rm(list=ls())
# Bibliotecas
library(readr)   # CSV
install.packages("readr")
install.packages("readr")
library(readr)   # CSV
install.packages("readxl")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("weitexl")
library(readr)   # CSV
library(readxl)  # XLSX
library(dplyr)   # Manipulação de dados
library(ggplot2) # Vizualização de dados
library(weitexl) # Exportar para excel
install.packages("writexl")
library(writexl) # Exportar para excel
library(readr)   # CSV
library(readxl)  # XLSX
library(dplyr)   # Manipulação de dados
library(ggplot2) # Vizualização de dados
library(writexl) # Exportar para excel
PATH <- "D:\docs\Fatec\3 Semestre\ProjetoInt\tarefa 003"
PATH <- "D:/docs/Fatec/3 Semestre/ProjetoInt/tarefa 003"
setwd(PATH)
# Definir caminhos especificos
path_csv <- "populacao_canada.csv"
path_xlsx <- "populacao_canada.xlsx"
# Importar CSV
data <- read_csv(path_csv)
print(data)
data_xlsx <- read_xlsx(path_xlsx)
print(data_xlsx)
print(head(data_csv))
data_csv <- read_csv(path_csv)
print(head(data_csv))
print(head(data_csv))
head(data_csv)
str(data_csv)
print(str(data_csv))
summary(data_csv)
sum(is.na(data_csv))
data_csv
data <- data_csv %>%
arrange(desc(Populacao)) %>% # Ordenar por ordem decrescente
mutate(Densidade_hab_km2 = Populacao / Area_km2) # Calcular densidade populacional
data
mean(data_csv$Populacao, na.rm = TRUE)
data_csv$Provincia[which.max(data_csv$Populacao)]
data_csv$Provincia[which.min(data_csv$Populacao)]
ggplot(data_csv, aes(x = reorder(Provincia, -Populacao), y = Populacao)) +
geom_bar(stat = "identity", fill = "blue") +
theme_minimal() +
labs(title = "População do Canadá por Província", x = "Província", y = "População") +
coord_flip() # Inverter o eixo
ggplot(data_csv, aes(x = reorder(Provincia, -Populacao), y = Populacao)) +
geom_bar(stat = "identity", fill = "blue") +
theme_minimal() +
labs(title = "População do Canadá por Província", x = "Província", y = "População")
ggplot(data_csv, aes(x = reorder(Provincia, -Populacao), y = Populacao)) +
geom_bar(stat = "identity", fill = "blue") +
theme_minimal() +
labs(title = "População do Canadá por Província", x = "Província", y = "População") +
coord_flip() # Inverter o eixo para melhor visualização
ggplot(data_csv, aes(x = reorder(Provincia, -Populacao), y = Populacao)) +
geom_bar(stat = "identity", fill = "red") +
theme_minimal() +
labs(title = "População do Canadá por Província", x = "Província", y = "População") +
coord_flip() # Inverter o eixo para melhor visualização
ggplot(data_csv, aes(x = Area_km2, y = Populacao)) +
geom_point(color = "green") +
theme_minimal() +
labs(title = "Relação entre Área e População", x = "Área (km²)", y = "População")
write_csv(data_csv, "populacao_canada_tratada.csv")
write_xlsx(data_xlsx, "populacao_canada_tratada.xlsx")
write_csv(data, "populacao_canada_tratada.csv")
write_csv(data, "populacao_canada_tratada.csv")
write_xlsx(data, "populacao_canada_tratada.xlsx")
data
